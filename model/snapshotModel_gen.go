// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	snapshotFieldNames          = builder.RawFieldNames(&Snapshot{})
	snapshotRows                = strings.Join(snapshotFieldNames, ",")
	snapshotRowsExpectAutoSet   = strings.Join(stringx.Remove(snapshotFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	snapshotRowsWithPlaceHolder = strings.Join(stringx.Remove(snapshotFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheBetxinSnapshotIdPrefix = "cache:betxin:snapshot:id:"
)

type (
	snapshotModel interface {
		Insert(ctx context.Context, data *Snapshot) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Snapshot, error)
		Update(ctx context.Context, data *Snapshot) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSnapshotModel struct {
		sqlc.CachedConn
		table string
	}

	Snapshot struct {
		Id        int64     `db:"id"`
		TraceId   string    `db:"trace_id"`
		Uid       string    `db:"uid"`
		Tid       string    `db:"tid"`
		CreatedAt time.Time `db:"created_at"`
	}
)

func newSnapshotModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSnapshotModel {
	return &defaultSnapshotModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`snapshot`",
	}
}

func (m *defaultSnapshotModel) Delete(ctx context.Context, id int64) error {
	betxinSnapshotIdKey := fmt.Sprintf("%s%v", cacheBetxinSnapshotIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, betxinSnapshotIdKey)
	return err
}

func (m *defaultSnapshotModel) FindOne(ctx context.Context, id int64) (*Snapshot, error) {
	betxinSnapshotIdKey := fmt.Sprintf("%s%v", cacheBetxinSnapshotIdPrefix, id)
	var resp Snapshot
	err := m.QueryRowCtx(ctx, &resp, betxinSnapshotIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", snapshotRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSnapshotModel) Insert(ctx context.Context, data *Snapshot) (sql.Result, error) {
	betxinSnapshotIdKey := fmt.Sprintf("%s%v", cacheBetxinSnapshotIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, snapshotRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TraceId, data.Uid, data.Tid)
	}, betxinSnapshotIdKey)
	return ret, err
}

func (m *defaultSnapshotModel) Update(ctx context.Context, data *Snapshot) error {
	betxinSnapshotIdKey := fmt.Sprintf("%s%v", cacheBetxinSnapshotIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, snapshotRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TraceId, data.Uid, data.Tid, data.Id)
	}, betxinSnapshotIdKey)
	return err
}

func (m *defaultSnapshotModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheBetxinSnapshotIdPrefix, primary)
}

func (m *defaultSnapshotModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", snapshotRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSnapshotModel) tableName() string {
	return m.table
}
