// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/shopspring/decimal"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	refundFieldNames          = builder.RawFieldNames(&Refund{})
	refundRows                = strings.Join(refundFieldNames, ",")
	refundRowsExpectAutoSet   = strings.Join(stringx.Remove(refundFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	refundRowsWithPlaceHolder = strings.Join(stringx.Remove(refundFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheBetxinRefundIdPrefix      = "cache:betxin:refund:id:"
	cacheBetxinRefundTraceIdPrefix = "cache:betxin:refund:traceId:"
	cacheBetxinRefundUidTidPrefix  = "cache:betxin:refund:uid:tid:"
)

type (
	refundModel interface {
		Insert(ctx context.Context, data *Refund) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Refund, error)
		FindOneByTraceId(ctx context.Context, traceId string) (*Refund, error)
		FindOneByUidTid(ctx context.Context, uid string, tid string) (*Refund, error)
		Update(ctx context.Context, data *Refund) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRefundModel struct {
		sqlc.CachedConn
		table string
	}

	Refund struct {
		Id        int64     `db:"id"`
		Uid       string    `db:"uid"`
		Tid       string    `db:"tid"`
		TraceId   string    `db:"trace_id"`
		AssetId   string    `db:"asset_id"`
		YesPrice  decimal.Decimal   `db:"yes_price"`
		NoPrice   decimal.Decimal   `db:"no_price"`
		Memo      string    `db:"memo"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newRefundModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultRefundModel {
	return &defaultRefundModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`refund`",
	}
}

func (m *defaultRefundModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	betxinRefundIdKey := fmt.Sprintf("%s%v", cacheBetxinRefundIdPrefix, id)
	betxinRefundTraceIdKey := fmt.Sprintf("%s%v", cacheBetxinRefundTraceIdPrefix, data.TraceId)
	betxinRefundUidTidKey := fmt.Sprintf("%s%v:%v", cacheBetxinRefundUidTidPrefix, data.Uid, data.Tid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, betxinRefundIdKey, betxinRefundTraceIdKey, betxinRefundUidTidKey)
	return err
}

func (m *defaultRefundModel) FindOne(ctx context.Context, id int64) (*Refund, error) {
	betxinRefundIdKey := fmt.Sprintf("%s%v", cacheBetxinRefundIdPrefix, id)
	var resp Refund
	err := m.QueryRowCtx(ctx, &resp, betxinRefundIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", refundRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRefundModel) FindOneByTraceId(ctx context.Context, traceId string) (*Refund, error) {
	betxinRefundTraceIdKey := fmt.Sprintf("%s%v", cacheBetxinRefundTraceIdPrefix, traceId)
	var resp Refund
	err := m.QueryRowIndexCtx(ctx, &resp, betxinRefundTraceIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `trace_id` = ? limit 1", refundRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, traceId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRefundModel) FindOneByUidTid(ctx context.Context, uid string, tid string) (*Refund, error) {
	betxinRefundUidTidKey := fmt.Sprintf("%s%v:%v", cacheBetxinRefundUidTidPrefix, uid, tid)
	var resp Refund
	err := m.QueryRowIndexCtx(ctx, &resp, betxinRefundUidTidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `uid` = ? and `tid` = ? limit 1", refundRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uid, tid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRefundModel) Insert(ctx context.Context, data *Refund) (sql.Result, error) {
	betxinRefundIdKey := fmt.Sprintf("%s%v", cacheBetxinRefundIdPrefix, data.Id)
	betxinRefundTraceIdKey := fmt.Sprintf("%s%v", cacheBetxinRefundTraceIdPrefix, data.TraceId)
	betxinRefundUidTidKey := fmt.Sprintf("%s%v:%v", cacheBetxinRefundUidTidPrefix, data.Uid, data.Tid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, refundRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.Tid, data.TraceId, data.AssetId, data.YesPrice, data.NoPrice, data.Memo)
	}, betxinRefundIdKey, betxinRefundTraceIdKey, betxinRefundUidTidKey)
	return ret, err
}

func (m *defaultRefundModel) Update(ctx context.Context, newData *Refund) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	betxinRefundIdKey := fmt.Sprintf("%s%v", cacheBetxinRefundIdPrefix, data.Id)
	betxinRefundTraceIdKey := fmt.Sprintf("%s%v", cacheBetxinRefundTraceIdPrefix, data.TraceId)
	betxinRefundUidTidKey := fmt.Sprintf("%s%v:%v", cacheBetxinRefundUidTidPrefix, data.Uid, data.Tid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, refundRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Uid, newData.Tid, newData.TraceId, newData.AssetId, newData.YesPrice, newData.NoPrice, newData.Memo, newData.Id)
	}, betxinRefundIdKey, betxinRefundTraceIdKey, betxinRefundUidTidKey)
	return err
}

func (m *defaultRefundModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheBetxinRefundIdPrefix, primary)
}

func (m *defaultRefundModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", refundRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRefundModel) tableName() string {
	return m.table
}
