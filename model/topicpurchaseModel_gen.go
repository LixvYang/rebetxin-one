// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/shopspring/decimal"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	topicpurchaseFieldNames          = builder.RawFieldNames(&Topicpurchase{})
	topicpurchaseRows                = strings.Join(topicpurchaseFieldNames, ",")
	topicpurchaseRowsExpectAutoSet   = strings.Join(stringx.Remove(topicpurchaseFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	topicpurchaseRowsWithPlaceHolder = strings.Join(stringx.Remove(topicpurchaseFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheBetxinTopicpurchaseIdPrefix     = "cache:betxin:topicpurchase:id:"
	cacheBetxinTopicpurchaseUidTidPrefix = "cache:betxin:topicpurchase:uid:tid:"
)

type (
	topicpurchaseModel interface {
		Insert(ctx context.Context, data *Topicpurchase) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Topicpurchase, error)
		FindOneByUidTid(ctx context.Context, uid string, tid string) (*Topicpurchase, error)
		Update(ctx context.Context, data *Topicpurchase) error
		Delete(ctx context.Context, id int64) error
		ListByUid(ctx context.Context, uid string) ([]Topicpurchase, error)
		ListByTid(ctx context.Context, tid string) ([]Topicpurchase, error)
	}

	defaultTopicpurchaseModel struct {
		sqlc.CachedConn
		table string
	}

	Topicpurchase struct {
		Id        int64        `db:"id"`
		Uid       string       `db:"uid"`
		Tid       string       `db:"tid"`
		TraceId   string       `db:"trace_id"`
		YesPrice  decimal.Decimal      `db:"yes_price"`
		NoPrice   decimal.Decimal      `db:"no_price"`
		CreatedAt time.Time    `db:"created_at"`
		UpdatedAt time.Time    `db:"updated_at"`
		DeletedAt sql.NullTime `db:"deleted_at"`
	}
)

func newTopicpurchaseModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTopicpurchaseModel {
	return &defaultTopicpurchaseModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`topicpurchase`",
	}
}

func (m *defaultTopicpurchaseModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	betxinTopicpurchaseIdKey := fmt.Sprintf("%s%v", cacheBetxinTopicpurchaseIdPrefix, id)
	betxinTopicpurchaseUidTidKey := fmt.Sprintf("%s%v:%v", cacheBetxinTopicpurchaseUidTidPrefix, data.Uid, data.Tid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, betxinTopicpurchaseIdKey, betxinTopicpurchaseUidTidKey)
	return err
}

func (m *defaultTopicpurchaseModel) FindOne(ctx context.Context, id int64) (*Topicpurchase, error) {
	betxinTopicpurchaseIdKey := fmt.Sprintf("%s%v", cacheBetxinTopicpurchaseIdPrefix, id)
	var resp Topicpurchase
	err := m.QueryRowCtx(ctx, &resp, betxinTopicpurchaseIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", topicpurchaseRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTopicpurchaseModel) FindOneByUidTid(ctx context.Context, uid string, tid string) (*Topicpurchase, error) {
	betxinTopicpurchaseUidTidKey := fmt.Sprintf("%s%v:%v", cacheBetxinTopicpurchaseUidTidPrefix, uid, tid)
	var resp Topicpurchase
	err := m.QueryRowIndexCtx(ctx, &resp, betxinTopicpurchaseUidTidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `uid` = ? and `tid` = ? limit 1", topicpurchaseRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uid, tid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTopicpurchaseModel) Insert(ctx context.Context, data *Topicpurchase) (sql.Result, error) {
	betxinTopicpurchaseIdKey := fmt.Sprintf("%s%v", cacheBetxinTopicpurchaseIdPrefix, data.Id)
	betxinTopicpurchaseUidTidKey := fmt.Sprintf("%s%v:%v", cacheBetxinTopicpurchaseUidTidPrefix, data.Uid, data.Tid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, topicpurchaseRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.Tid, data.TraceId, data.YesPrice, data.NoPrice, data.DeletedAt)
	}, betxinTopicpurchaseIdKey, betxinTopicpurchaseUidTidKey)
	return ret, err
}

func (m *defaultTopicpurchaseModel) Update(ctx context.Context, newData *Topicpurchase) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	betxinTopicpurchaseIdKey := fmt.Sprintf("%s%v", cacheBetxinTopicpurchaseIdPrefix, data.Id)
	betxinTopicpurchaseUidTidKey := fmt.Sprintf("%s%v:%v", cacheBetxinTopicpurchaseUidTidPrefix, data.Uid, data.Tid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, topicpurchaseRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Uid, newData.Tid, newData.TraceId, newData.YesPrice, newData.NoPrice, newData.DeletedAt, newData.Id)
	}, betxinTopicpurchaseIdKey, betxinTopicpurchaseUidTidKey)
	return err
}

func (m *defaultTopicpurchaseModel) ListByUid(ctx context.Context, uid string) ([]Topicpurchase, error) {
	var resp []Topicpurchase
	var err error
	query := fmt.Sprintf("SELECT %s FROM %s WHERE (uid = ?)", topicpurchaseRows, m.table)

	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, uid)
	switch err {
	case nil:
		return resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTopicpurchaseModel) ListByTid(ctx context.Context, tid string) ([]Topicpurchase, error) {
	var resp []Topicpurchase
	var err error
	query := fmt.Sprintf("SELECT %s FROM %s WHERE (tid = ?)", topicpurchaseRows, m.table)

	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, tid)
	switch err {
	case nil:
		return resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


func (m *defaultTopicpurchaseModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheBetxinTopicpurchaseIdPrefix, primary)
}

func (m *defaultTopicpurchaseModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", topicpurchaseRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTopicpurchaseModel) tableName() string {
	return m.table
}
