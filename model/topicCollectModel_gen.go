// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	topicCollectFieldNames          = builder.RawFieldNames(&TopicCollect{})
	topicCollectRows                = strings.Join(topicCollectFieldNames, ",")
	topicCollectRowsExpectAutoSet   = strings.Join(stringx.Remove(topicCollectFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	topicCollectRowsWithPlaceHolder = strings.Join(stringx.Remove(topicCollectFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheBetxinTopicCollectIdPrefix     = "cache:betxin:topicCollect:id:"
	cacheBetxinTopicCollectUidTidPrefix = "cache:betxin:topicCollect:uid:tid:"
)

type (
	topicCollectModel interface {
		Insert(ctx context.Context, data *TopicCollect) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TopicCollect, error)
		FindOneByUidTid(ctx context.Context, uid string, tid string) (*TopicCollect, error)
		Update(ctx context.Context, data *TopicCollect) error
		Delete(ctx context.Context, id int64) error
		ListByUid(ctx context.Context, uid string) ([]*TopicCollect, error)
	}

	defaultTopicCollectModel struct {
		sqlc.CachedConn
		table string
	}

	TopicCollect struct {
		Id        int64     `db:"id"`
		Uid       string    `db:"uid"`
		Tid       string    `db:"tid"`
		Status    int64     `db:"status"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newTopicCollectModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTopicCollectModel {
	return &defaultTopicCollectModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`topic_collect`",
	}
}

func (m *defaultTopicCollectModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	betxinTopicCollectIdKey := fmt.Sprintf("%s%v", cacheBetxinTopicCollectIdPrefix, id)
	betxinTopicCollectUidTidKey := fmt.Sprintf("%s%v:%v", cacheBetxinTopicCollectUidTidPrefix, data.Uid, data.Tid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, betxinTopicCollectIdKey, betxinTopicCollectUidTidKey)
	return err
}

func (m *defaultTopicCollectModel) FindOne(ctx context.Context, id int64) (*TopicCollect, error) {
	betxinTopicCollectIdKey := fmt.Sprintf("%s%v", cacheBetxinTopicCollectIdPrefix, id)
	var resp TopicCollect
	err := m.QueryRowCtx(ctx, &resp, betxinTopicCollectIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", topicCollectRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTopicCollectModel) FindOneByUidTid(ctx context.Context, uid string, tid string) (*TopicCollect, error) {
	betxinTopicCollectUidTidKey := fmt.Sprintf("%s%v:%v", cacheBetxinTopicCollectUidTidPrefix, uid, tid)
	var resp TopicCollect
	err := m.QueryRowIndexCtx(ctx, &resp, betxinTopicCollectUidTidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `uid` = ? and `tid` = ? limit 1", topicCollectRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uid, tid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


func (m *defaultTopicCollectModel) ListByUid(ctx context.Context, uid string) ([]*TopicCollect, error) {
	var resp []*TopicCollect
	var err error
	query := fmt.Sprintf("SELECT %s FROM %s WHERE (uid = ?)", topicCollectRows, m.table)

	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, uid)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTopicCollectModel) Insert(ctx context.Context, data *TopicCollect) (sql.Result, error) {
	betxinTopicCollectIdKey := fmt.Sprintf("%s%v", cacheBetxinTopicCollectIdPrefix, data.Id)
	betxinTopicCollectUidTidKey := fmt.Sprintf("%s%v:%v", cacheBetxinTopicCollectUidTidPrefix, data.Uid, data.Tid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, topicCollectRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.Tid, data.Status)
	}, betxinTopicCollectIdKey, betxinTopicCollectUidTidKey)
	return ret, err
}

func (m *defaultTopicCollectModel) Update(ctx context.Context, newData *TopicCollect) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	betxinTopicCollectIdKey := fmt.Sprintf("%s%v", cacheBetxinTopicCollectIdPrefix, data.Id)
	betxinTopicCollectUidTidKey := fmt.Sprintf("%s%v:%v", cacheBetxinTopicCollectUidTidPrefix, data.Uid, data.Tid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, topicCollectRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Uid, newData.Tid, newData.Status, newData.Id)
	}, betxinTopicCollectIdKey, betxinTopicCollectUidTidKey)
	return err
}

func (m *defaultTopicCollectModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheBetxinTopicCollectIdPrefix, primary)
}

func (m *defaultTopicCollectModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", topicCollectRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTopicCollectModel) tableName() string {
	return m.table
}
