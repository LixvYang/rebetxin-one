// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: mixinsrv.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MixinsrvClient is the client API for Mixinsrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MixinsrvClient interface {
	// -----------------------mixinsrv-----------------------
	SendTransfer(ctx context.Context, in *SendTransferReq, opts ...grpc.CallOption) (*SendTransferResp, error)
	SendCard(ctx context.Context, in *SendCardReq, opts ...grpc.CallOption) (*SendCardResp, error)
	SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error)
	SendBtnGroup(ctx context.Context, in *SendBtnGroupReq, opts ...grpc.CallOption) (*SendBtnGroupResp, error)
}

type mixinsrvClient struct {
	cc grpc.ClientConnInterface
}

func NewMixinsrvClient(cc grpc.ClientConnInterface) MixinsrvClient {
	return &mixinsrvClient{cc}
}

func (c *mixinsrvClient) SendTransfer(ctx context.Context, in *SendTransferReq, opts ...grpc.CallOption) (*SendTransferResp, error) {
	out := new(SendTransferResp)
	err := c.cc.Invoke(ctx, "/pb.mixinsrv/SendTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixinsrvClient) SendCard(ctx context.Context, in *SendCardReq, opts ...grpc.CallOption) (*SendCardResp, error) {
	out := new(SendCardResp)
	err := c.cc.Invoke(ctx, "/pb.mixinsrv/SendCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixinsrvClient) SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error) {
	out := new(SendMessageResp)
	err := c.cc.Invoke(ctx, "/pb.mixinsrv/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixinsrvClient) SendBtnGroup(ctx context.Context, in *SendBtnGroupReq, opts ...grpc.CallOption) (*SendBtnGroupResp, error) {
	out := new(SendBtnGroupResp)
	err := c.cc.Invoke(ctx, "/pb.mixinsrv/SendBtnGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MixinsrvServer is the server API for Mixinsrv service.
// All implementations must embed UnimplementedMixinsrvServer
// for forward compatibility
type MixinsrvServer interface {
	// -----------------------mixinsrv-----------------------
	SendTransfer(context.Context, *SendTransferReq) (*SendTransferResp, error)
	SendCard(context.Context, *SendCardReq) (*SendCardResp, error)
	SendMessage(context.Context, *SendMessageReq) (*SendMessageResp, error)
	SendBtnGroup(context.Context, *SendBtnGroupReq) (*SendBtnGroupResp, error)
	mustEmbedUnimplementedMixinsrvServer()
}

// UnimplementedMixinsrvServer must be embedded to have forward compatible implementations.
type UnimplementedMixinsrvServer struct {
}

func (UnimplementedMixinsrvServer) SendTransfer(context.Context, *SendTransferReq) (*SendTransferResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransfer not implemented")
}
func (UnimplementedMixinsrvServer) SendCard(context.Context, *SendCardReq) (*SendCardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCard not implemented")
}
func (UnimplementedMixinsrvServer) SendMessage(context.Context, *SendMessageReq) (*SendMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMixinsrvServer) SendBtnGroup(context.Context, *SendBtnGroupReq) (*SendBtnGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBtnGroup not implemented")
}
func (UnimplementedMixinsrvServer) mustEmbedUnimplementedMixinsrvServer() {}

// UnsafeMixinsrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MixinsrvServer will
// result in compilation errors.
type UnsafeMixinsrvServer interface {
	mustEmbedUnimplementedMixinsrvServer()
}

func RegisterMixinsrvServer(s grpc.ServiceRegistrar, srv MixinsrvServer) {
	s.RegisterService(&Mixinsrv_ServiceDesc, srv)
}

func _Mixinsrv_SendTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixinsrvServer).SendTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mixinsrv/SendTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixinsrvServer).SendTransfer(ctx, req.(*SendTransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixinsrv_SendCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixinsrvServer).SendCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mixinsrv/SendCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixinsrvServer).SendCard(ctx, req.(*SendCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixinsrv_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixinsrvServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mixinsrv/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixinsrvServer).SendMessage(ctx, req.(*SendMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixinsrv_SendBtnGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBtnGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixinsrvServer).SendBtnGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mixinsrv/SendBtnGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixinsrvServer).SendBtnGroup(ctx, req.(*SendBtnGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Mixinsrv_ServiceDesc is the grpc.ServiceDesc for Mixinsrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mixinsrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.mixinsrv",
	HandlerType: (*MixinsrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTransfer",
			Handler:    _Mixinsrv_SendTransfer_Handler,
		},
		{
			MethodName: "SendCard",
			Handler:    _Mixinsrv_SendCard_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Mixinsrv_SendMessage_Handler,
		},
		{
			MethodName: "SendBtnGroup",
			Handler:    _Mixinsrv_SendBtnGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixinsrv.proto",
}
